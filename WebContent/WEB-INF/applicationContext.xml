<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  	xmlns:context="http://www.springframework.org/schema/context"
  	xmlns:util="http://www.springframework.org/schema/util"
  	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
    	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
    	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">

	<!-- définir un bean de type Properties à partir du contenu d'un fichier .properties -->
    <!-- <util:properties id="appConfig" location="classpath:conf.properties" /> -->
    <!-- Use another .properties file to initialize the datasource for the database configuration table. -->
    <bean id="dbConfig" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    	<property name="location" value="classpath:jdbc.properties" />

  		<!-- <property name="locations">
   			<list>
   				<value>classpath:jdbc1.properties</value>
    			<value>classpath:jdbc2.properties</value>
   			</list>
  		</property> -->
    </bean>


	<!-- Nous allons d'abord définir notre source de données comme ci-dessous à cause du Load Application Properties from Database -->
    <!-- In order to load configuration/placeholders from a database table, the datasource has to be instaniated prior to the instaniation of all of the other beans with placeholders. The datasource factory creates the instance of the datasource via another properties file loaded outside of spring. -->
    <!-- DB data source. -->
    <bean id="db_connection" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
 		<!-- <property name="driverClass" value="com.mysql.jdbc.Driver" />
 		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/localdb" /> -->
	    <property name="driverClass" value="#{dbConfig['db.driverClassName']}" />
	    <property name="jdbcUrl" value="#{dbConfig['db.host']}" />
		<!-- <property name="user" value="abutu" /> -->
		<property name="user" value="#{dbConfig['db.username']}" />
		<!-- <property name="password" value="kT60#bTh03#18" /> -->
		<property name="password" value="#{dbConfig['db.password']}" />

	    <!-- <property name="minPoolSize" value="3" /> -->
	    <property name="minPoolSize" value="#{dbConfig['db.minPoolSize']}" />
	    <!-- <property name="maxPoolSize" value="10" /> -->
	    <property name="maxPoolSize" value="#{dbConfig['db.maxPoolSize']}" />
	    <!-- <property name="acquireIncrement" value="1" /> -->
	    <property name="acquireIncrement" value="#{dbConfig['db.acquireIncrement']}" />
	    <!-- <property name="maxStatements" value="0" /> -->
	    <property name="maxStatements" value="#{dbConfig['db.maxStatements']}" />
	    <property name="idleConnectionTestPeriod" value="#{dbConfig['db.idleConnectionTestPeriod']}" />
	    <property name="checkoutTimeout" value="#{dbConfig['db.checkoutTimeout']}" />
    </bean>
    <!-- <bean id="db_connection" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
        <property name="minPoolSize" value="${jdbc.minPoolSize}" />
        <property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
        <property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
        <property name="preferredTestQuery" value="${jdbc.preferredTestQuery}" />
        <property name="testConnectionOnCheckout" value="${jdbc.testConnection}" />
        <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />

        <property name="maxStatements" value="${jdbc.maxStatements}" />
    	<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}" />
    </bean> -->



	<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">   
  		<property name="location" value="classpath:applicationContext.properties" />
	</bean> -->
	<!-- Load Application Properties from Database : nous définirons notre classe de processeur de propriété personnalisée qui étendra le PropertyPlaceholderConfigurer de Spring et chargera les propriétés de la base de données -->
	<!-- The names of the beans that this bean depends on being initialized. The bean factory will guarantee that these beans get initialized before this bean.
	Note that dependencies are normally expressed through bean properties or  constructor arguments. This property should just be necessary for other kinds of dependencies like statics (*ugh*) or database preparation on startup. -->
	<!-- <bean id="propertyConfigurer" class="com.util.PropertiesUtils" depends-on="db_connection">
		Load Application Properties from Database : uniquement les propriétés métier ou logic du service et qui peuvent changer
		The names of the beans that this bean depends on being initialized. The bean factory will guarantee that these beans get initialized before this bean.
		Note that dependencies are normally expressed through bean properties or  constructor arguments. This property should just be necessary for other kinds of dependencies like statics (*ugh*) or database preparation on startup.
		<property name="dataSourceName" value="db_connection" />

		<property name="serviceShortCode" value="#{dbConfig['db.serviceShortCode']}" />

		You can also note that we have set localOverride as true. This will make sure that properties from database take precedence over that available in any properties file.
		<property name="localOverride" value="true" />

		uniquement les propriétés liées aux ressources pour configurer les différents composants de l'application et démarrer l'application
		<property name="locations">
			<list>
				<value>classpath:app-custom.properties</value>
				<value>classpath:applicationContext.properties</value>
			</list>
		</property>
	</bean> -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- You can also note that we have set localOverride as true. This will make sure that properties from database take precedence over that available in any properties file. -->
		<property name="localOverride" value="true" />

		<!-- Commons-configuration (1.6) -->
		<!-- <property name="properties" ref="commonsConfigurationFactoryBean" /> -->

		<!-- Commons-configuration (2.x) -->
  		<property name="properties">
      		<bean class="org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean">
          		<constructor-arg>
					<!-- Commons-configuration (2.x) -->
					<bean id="databaseConfiguration" class="org.apache.commons.configuration2.DatabaseConfiguration">
					    <property name="dataSource" ref="db_connection" /><!-- DataSource for obtaining database connections -->
					    <property name="table" value="SERVICE_CONFIG_PARAMS_EBA" /><!-- name of the table containing configuration data -->
					    <property name="configurationNameColumn" value="CODE" /><!-- name of the table column with the configuration name -->
					    <property name="keyColumn" value="CONFIG_KEY" /><!-- name of the column containing the configuration keys -->
					    <property name="valueColumn" value="CONFIG_VALUE" /><!-- name of the column containing the configuration values -->
					    <property name="configurationName" value="#{dbConfig['db.serviceShortCode']}" /><!-- the name of this configuration instance => the name of the table column with the configuration name -->
					</bean>
          		</constructor-arg>
      		</bean>
  		</property>

		<!-- uniquement les propriétés liées aux ressources pour configurer les différents composants de l'application et démarrer l'application -->
  		<property name="locations">
   			<list>
   				<!-- <value>classpath:app-custom.properties</value> -->
    			<value>classpath:applicationContext.properties</value>
   			</list>
  		</property>
    </bean>
	<!-- <bean id="commonsConfigurationFactoryBean" class="org.springmodules.commons.configuration.CommonsConfigurationFactoryBean">
    	<constructor-arg ref="databaseConfiguration" />
	</bean> -->
	<!-- Commons-configuration (1.6) -->
	<!-- <bean id="databaseConfiguration" class="org.apache.commons.configuration.DatabaseConfiguration">
	    <constructor-arg type="javax.sql.DataSource" ref="db_connection" />DataSource for obtaining database connections
	    <constructor-arg name="table" value="SERVICE_CONFIG_PARAMS_EBA" />name of the table containing configuration data
	    <constructor-arg name="nameColumn" value="CODE" />name of the table column with the configuration name
	    <constructor-arg name="keyColumn" value="CONFIG_KEY" />name of the column containing the configuration keys
	    <constructor-arg name="valueColumn" value="CONFIG_VALUE" />name of the column containing the configuration values
	    <constructor-arg name="name" value="#{dbConfig['db.serviceShortCode']}" />the name of this configuration instance => the name of the table column with the configuration name
	</bean> -->
    <!-- Spring propose l'espace de nommage context qui simplifie cette déclaration en utilisant le tag <property-placeholder> -->
    <!-- <context:property-placeholder location="classpath:applicationContext.properties" /> -->



	<!-- The use of <context:component-scan> implicitly enables the functionality of <context:annotation-config>.
	There is usually no need to include the <context:annotation-config> element when using <context:component-scan> -->
    <context:annotation-config />

  	<context:component-scan base-package="product" use-default-filters="false">
  		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
  		<!-- <context:include-filter type="regex" expression=".*Stub.*Repository" /> -->
  		<!-- <context:include-filter type="regex" expression=".*PropertiesBasedOnPropertiesFactoryBean" /> -->
  		<context:include-filter type="regex" expression=".*PropertiesBasedOnPropertyPlaceholderConfigurer" />

  		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository" />
  		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
  		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  	</context:component-scan>


	<bean id="dao" class="dao.DAO">
		<!-- <constructor-arg><null /></constructor-arg>
		<constructor-arg value="10" /> -->

  		<!-- <constructor-arg ref="dataSource" />
  		<constructor-arg ref="aclCache" />
  		<constructor-arg>
    		<bean class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
		      	<constructor-arg>
			        <list>
			          <ref local="roleAdmin" />
			          <ref local="roleAdmin" />
			          <ref local="roleAdmin" />
			        </list>
		      	</constructor-arg>
    		</bean>
  		</constructor-arg>
  		<constructor-arg>
    		<bean class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
  		</constructor-arg> -->
  		
  		<!-- <constructor-arg>
    		<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
      			<property name="cacheManager">
      				<bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
        		</property>
        		<property name="cacheName" value="aclCache" />
      		</bean>
  		</constructor-arg> -->
  
		<!-- <constructor-arg index="0" type="com.mchange.v2.c3p0.ComboPooledDataSource" ref="db_connection" /> -->
		<constructor-arg ref="db_connection" />
		<!-- <constructor-arg index="0" type="com.mchange.v2.c3p0.ComboPooledDataSource">
			<ref bean="db_connection" />
			<ref bean="db_connection" />
    	</constructor-arg> -->

    	<!-- <property name="dataSource" ref="db_connection" /> -->
   	</bean>

	<!-- <cache:annotation-driven /> -->
	<!-- <cache:annotation-driven cache-manager="cacheManager" /> -->
	<!-- EhCacheCacheManager est utilisé pour Ehcache 2. Vous ne devez pas l'utiliser -->
    <!-- <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManagerFactory"/>
    </bean> -->
	<!-- <bean id="ehcacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	    <property name="configLocation" value="classpath:com/javaetmoi/demo/services/ ehcache.xml" />
	    <property name="configLocation" value="classpath:ehcache.xml" />
	    
	    By passing true to setShared() method, we enable our cache to be shared as singleton at the ClassLoader level. By default it is false
	    <property name="shared" value="true" />
	</bean> -->

	<!-- Ehcache 3 est configuré via JCache, vous devez donc utiliser le JCacheCacheManager plutôt. -->
	<cache:annotation-driven cache-manager="ehCacheManager" />
	<bean id="ehCacheManager" class="org.springframework.cache.jcache.JCacheCacheManager">
	    <property name="cacheManager">
	    	<bean class="org.springframework.cache.jcache.JCacheManagerFactoryBean">
	    		<!-- <property name="cacheManagerUri" value="${spring.cache.jcache.config}" /> -->
		        <property name="cacheManagerUri">
		            <value>${spring.cache.jcache.config}</value>
		        </property>
	    	</bean>
	    </property>
	</bean>

	<!-- <cache:annotation-driven />
	<bean id="cacheManager" class="org.springframework.cache.jcache.JCacheCacheManager">
        <property name="cacheManager">
            <bean class="org.springframework.cache.jcache.JCacheManagerFactoryBean">
               <property name="cacheManagerUri" value="classpath:ehcache.xml"/>
            </bean>
        </property>
	</bean> -->

   	<bean id="jdbcResourceBundleMessageSourceDao" class="dao.queries.JdbcResourceBundleMessageSourceDao">
   		<constructor-arg index="0" type="dao.DAO">
   			<ref bean="dao" />
   		</constructor-arg>
   	</bean>


	<!-- !!! Spring recherche un bean nommé messageSource dans votre contexte et l'utilise pour résoudre ses messages. -->
    <!-- this MessageSource is being used in a web application -->
    <!-- <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"> -->
	<!-- You have to implement custom message source. It's a class that extends AbstractMessageSource and implements the abstract resolveCode(java.lang.String, java.util.Locale) method	 -->
	<bean id="messageSource" class="com.util.DatabaseBackedResourceBundleMessageSource">
   		<constructor-arg index="0" type="dao.queries.JdbcResourceBundleMessageSourceDao">
   			<ref bean="jdbcResourceBundleMessageSourceDao" />
   		</constructor-arg>

		<property name="basenames">
			<list>
				<value>i18n.messages</value>
				<value>i18n.exceptions</value>
			</list>
		</property>

		<property name="defaultEncoding" value="UTF-8" />

		<property name="serviceShortCode" value="#{dbConfig['db.serviceShortCode']}" />

		<!-- We were reminded of the default behavior of java.util.ResourceBundle (Remembering the basics is really important). -->
		<!-- If your locale file for locale cs doesn't contains message for a code then Your system locale is used -->
		<!-- We cannot really trust the locale if the deployment environment is the same than the locale of our locale development environment. Thus, in this use case the fallbackToSystemLocale property should always be set to false. -->
		<!-- When the value of this property is set to false, the default resource file is used, when the resource file for the asked locale is not found. -->

		<!-- property named setFallbackToSystemLocale is default to true so if your locale file for locale cs doesn't contains message for a code then Your system locale is used -->
		<!-- <property name="fallbackToSystemLocale" value="true" /> -->
		<!-- <property name="fallbackToSystemLocale" value="false" /> -->
		<property name="fallbackToSystemLocale" value="false"></property>
	</bean>

	<!-- !!! Spring recherche un bean nommé messageSource dans votre contexte et l'utilise pour résoudre ses messages. -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <property name="defaultEncoding" value="UTF-8" />
	    <property name="basenames">
	        <list>
	            <value>classpath:i18n/messages</value>
	        </list>
	    </property>


		We were reminded of the default behavior of java.util.ResourceBundle (Remembering the basics is really important).
		If your locale file for locale cs doesn't contains message for a code then Your system locale is used
		We cannot really trust the locale if the deployment environment is the same than the locale of our locale development environment. Thus, in this use case the fallbackToSystemLocale property should always be set to false.
		When the value of this property is set to false, the default resource file is used, when the resource file for the asked locale is not found.
	    <property name="fallbackToSystemLocale" value="false" />
	</bean> -->


    <import resource="spring-batch-config.xml" />

</beans>